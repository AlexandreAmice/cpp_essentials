module(
    name = "cpp_essentials",
    version = "0.1.0",
    # bazel_compatibility = ["<8.0.0"],
)

bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "rules_foreign_cc", version = "0.14.0")

bazel_dep(name = "eigen", version = "3.4.0.bcr.3")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "bazel_skylib", version = "1.7.1")

bazel_dep(name = "buildifier_prebuilt", version = "8.0.0", dev_dependency = True)

bazel_dep(name = "fmt", version = "11.0.2.bcr.1", repo_name = "fmt")
bazel_dep(name = "spdlog", version = "1.15.0.bcr.4", repo_name = "spdlog")  # noqa

# python
bazel_dep(name = "rules_python", version = "1.1.0")  #

# bazel_dep(name = "pybind11_bazel", version = "2.13.6")
bazel_dep(name = "pybind11_bazel")

# Override pybind11_bazel to use specific commit
git_override(
    module_name = "pybind11_bazel",
    commit = "e442ea9aa37ce10860ee720a6eda507a40782ddb",
    remote = "https://github.com/pybind/pybind11_bazel.git",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(python_version = "3.12")
use_repo(python, "python_versions")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.12",
    requirements_lock = "//third_party/python:requirements.txt",
)

# This version configures the Python version that's compatible with the binding
use_repo(pip, "pip")

# gtest
bazel_dep(name = "googletest", version = "1.16.0")

# gives some compile commands
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "0e990032f3c5a866e72615cf67e5ce22186dcb97",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

# Setup Cuda
bazel_dep(name = "rules_cuda", version = "0.2.3")

# Allows the use of host_copts et al. Switch this back to main once the PR is merged.
# Override rules_cuda with the specific branch

# This is the official rules cuda repository
# git_override(
#     module_name = "rules_cuda",
#     # commit = "24cc5d2514f6ac518f132e22e1a90ddd6681c122",
#     commit = "ecd7f246fb01d60eaec889ba3cb8a9da79b26614",
#     remote = "https://github.com/bazel-contrib/rules_cuda.git",
# )

# This is my fork.
git_override(
    module_name = "rules_cuda",
    commit = "6acbec23fa23e374c51ee80cdef0cc5eb7d59b15",
    remote = "https://github.com/AlexandreAmice/rules_cuda.git",
)

# archive_override(
#     module_name = "rules_cuda",
#     urls = ["https://github.com/wernerpe/rules_cuda/archive/1f8d4a0733226b246e799f3b17e0c76875a7997b.tar.gz"],
#     strip_prefix = "rules_cuda-1f8d4a0733226b246e799f3b17e0c76875a7997b",
#     integrity = "sha256-sjOk7TddjzFer8tqbkWEZEJV+oZTXvQBTop37b6i8pE=",
# )

cuda = use_extension("@rules_cuda//cuda:extensions.bzl", "toolchain")
# use this if using rules_cuda 0.2.3 or earlier
# cuda.local_toolchain(
#     name = "local_cuda",
#     toolkit_path = "",
# )
# use_repo(cuda, "local_cuda")

cuda.toolkit(
    name = "cuda",
    toolkit_path = "",
)
use_repo(cuda, "cuda")

# Building local copies of libraries.
# local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "local_repository")

# Junk left over from trying to pull in rust, cargo, and clarabel
# # Setup Rust and Cargo support
# bazel_dep(name = "rules_rust", version = "0.61.0")
# rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
# rust.toolchain(edition = "2021")
# use_repo(rust, "rust_toolchains")
# register_toolchains("@rust_toolchains//:all")

# # Set up crate universe to fetch Rust dependencies
# crate_repositories = use_extension("@rules_rust//crate_universe:extension.bzl", "crate_repositories")
# crate_repositories.from_cargo(
#     name = "crate_index",
#     cargo_lockfile = "//:Cargo.lock",
#     manifests = ["//:Cargo.toml"],
# )
# use_repo(crate_repositories, "crate_index")

# # Import http_archive rule
# http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
# git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

# # Import Clarabel.cpp repository. For now clarabel doesn't build.
# git_repository(
#     name = "clarabel_cpp",
#     remote = "https://github.com/oxfordcontrol/Clarabel.cpp.git",
#     tag = "v0.10.0",
#     recursive_init_submodules = True,
#     build_file = "@//third_party:clarabel.BUILD",
# )
