load("//tools:common_utils_cc.bzl", "common_utils_cc_library", "common_utils_cc_test")

package(default_visibility = ["//visibility:public"])

common_utils_cc_library(
    name = "unused",
    hdrs = ["unused.h"],
)

# A library of things that EVERYONE should want and MUST EAT.
# Be appropriately hesitant when adding new things here.
common_utils_cc_library(
    name = "essential",
    srcs = [
        "common_utils_assert_and_throw.cc",
    ],
    hdrs = [
        "common_utils_assert.h",
        "common_utils_assertion_error.h",
        "common_utils_copyable.h",
        "common_utils_throw.h",
        "eigen_types.h",
        "never_destroyed.h",
        "scalar_types.h",
    ],
    deps = [
        ":fmt",
        "@eigen",
        "@fmt",
    ],
)

common_utils_cc_library(
    name = "copyable_unique_ptr",
    hdrs = ["copyable_unique_ptr.h"],
    deps = [":is_cloneable"],
)

common_utils_cc_library(
    name = "fmt",
    srcs = [
        "fmt.cc",
        "fmt_eigen.cc",
    ],
    hdrs = [
        "fmt.h",
        "fmt_eigen.h",
        "fmt_ostream.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@eigen",
        "@fmt",
    ],
)

common_utils_cc_test(
    name = "copyable_unique_ptr_test",
    deps = [
        ":copyable_unique_ptr",
        "//utils:essential",
        "//utils:unused",
        "//utils/test_utils:is_dynamic_castable",
    ],
)

common_utils_cc_library(
    name = "is_cloneable",
    hdrs = ["is_cloneable.h"],
)

common_utils_cc_test(
    name = "is_cloneable_test",
    deps = [":is_cloneable"],
)

common_utils_cc_library(
    name = "nice_type_name",
    srcs = [
        "nice_type_name.cc",
        "nice_type_name_override.cc",
    ],
    hdrs = [
        "nice_type_name.h",
    ],
    implementation_deps = [
        ":nice_type_name_override_header",
    ],
    deps = [
        "//utils:essential",
    ],
)

# See Drake's common/BUILD.bazel nice_type_name_override_header package for details.
# N.B. This library does not have all of its dependencies declared. Instead,
# it defines only the headers such that it can be used by `pycommon_utils` without
# installing the file.
common_utils_cc_library(
    name = "nice_type_name_override_header",
    hdrs = ["nice_type_name_override.h"],
    # TODO demystify this. Likely will come up when we want
    # to build bindings.
    # install_hdrs_exclude = ["nice_type_name_override.h"],
    # tags = ["exclude_from_package"],
)

common_utils_cc_test(
    name = "nice_type_name_test",
    deps = [
        ":nice_type_name",
        ":nice_type_name_override_header",
        "//utils:essential",
    ],
)

common_utils_cc_library(
    name = "random",
    srcs = ["random.cc"],
    hdrs = ["random.h"],
    deps = [
        ":copyable_unique_ptr",
        "//utils:essential",
    ],
)

common_utils_cc_test(
    name = "random_test",
    deps = [":random"],
)

common_utils_cc_library(
    name = "eigen_random",
    srcs = ["eigen_random.cc"],
    hdrs = ["eigen_random.h"],
    deps = [
        "//utils:random",
    ],
)

common_utils_cc_test(
    name = "eigen_random_test",
    deps = [
        ":eigen_random",
        "//utils:random",
    ],
)

common_utils_cc_library(
    name = "cuda_utils",
    hdrs = ["cuda_utils.h"],
    deps = [
        # "@local_cuda//:cuda_runtime",
        "@cuda//:cuda_runtime",
    ],
)

common_utils_cc_test(
    name = "cuda_utils_test",
    deps = [":cuda_utils"],
)

common_utils_cc_library(
    name = "eigen_pack_utils",
    hdrs = ["eigen_pack_utils.h"],
    deps = [
        "//utils:essential",
    ],
)

common_utils_cc_test(
    name = "eigen_pack_utils_test",
    deps = [
        ":eigen_pack_utils",
        "//utils/test_utils:eigen_matrix_compare",
    ],
)
