load("//tools:common_utils_cc.bzl", "common_utils_cc_library", "common_utils_cc_test")
load("//tools:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

common_utils_cc_library(
    name = "unused",
    hdrs = ["unused.h"],
)

# A library of things that EVERYONE should want and MUST EAT.
# Be appropriately hesitant when adding new things here.
common_utils_cc_library(
    name = "essential",
    srcs = [
        "common_utils_assert_and_throw.cc",
        "text_logging.cc",
    ],
    hdrs = [
        "common_utils_assert.h",
        "common_utils_assertion_error.h",
        "common_utils_copyable.h",
        "common_utils_throw.h",
        "eigen_types.h",
        "never_destroyed.h",
        "scalar_types.h",
        "text_logging.h",
    ],
    deps = [
        ":fmt",
        "@eigen",
        "@fmt",
        "@spdlog",
    ],
)
# Essentials are tested at the end of the file due to the complexity of testing the logging.

common_utils_cc_library(
    name = "copyable_unique_ptr",
    hdrs = ["copyable_unique_ptr.h"],
    deps = [":is_cloneable"],
)

common_utils_cc_library(
    name = "fmt",
    srcs = [
        "fmt.cc",
        "fmt_eigen.cc",
    ],
    hdrs = [
        "fmt.h",
        "fmt_eigen.h",
        "fmt_ostream.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@eigen",
        "@fmt",
    ],
)

common_utils_cc_test(
    name = "copyable_unique_ptr_test",
    deps = [
        ":copyable_unique_ptr",
        ":essential",
        ":unused",
        "//utils/test_utils:is_dynamic_castable",
    ],
)

common_utils_cc_library(
    name = "is_cloneable",
    hdrs = ["is_cloneable.h"],
)

common_utils_cc_test(
    name = "is_cloneable_test",
    deps = [":is_cloneable"],
)

common_utils_cc_library(
    name = "nice_type_name",
    srcs = [
        "nice_type_name.cc",
        "nice_type_name_override.cc",
    ],
    hdrs = [
        "nice_type_name.h",
    ],
    implementation_deps = [
        ":nice_type_name_override_header",
    ],
    deps = [
        ":essential",
    ],
)

# See Drake's common/BUILD.bazel nice_type_name_override_header package for details.
# N.B. This library does not have all of its dependencies declared. Instead,
# it defines only the headers such that it can be used by `pycommon_utils` without
# installing the file.
common_utils_cc_library(
    name = "nice_type_name_override_header",
    hdrs = ["nice_type_name_override.h"],
    # TODO demystify this. Likely will come up when we want
    # to build bindings.
    # install_hdrs_exclude = ["nice_type_name_override.h"],
    # tags = ["exclude_from_package"],
)

common_utils_cc_test(
    name = "nice_type_name_test",
    deps = [
        ":essential",
        ":nice_type_name",
        ":nice_type_name_override_header",
    ],
)

common_utils_cc_library(
    name = "random",
    srcs = ["random.cc"],
    hdrs = ["random.h"],
    deps = [
        ":copyable_unique_ptr",
        ":essential",
    ],
)

common_utils_cc_test(
    name = "random_test",
    deps = [":random"],
)

common_utils_cc_library(
    name = "eigen_random",
    srcs = ["eigen_random.cc"],
    hdrs = ["eigen_random.h"],
    deps = [
        ":random",
    ],
)

common_utils_cc_test(
    name = "eigen_random_test",
    deps = [
        ":eigen_random",
        ":random",
    ],
)

common_utils_cc_library(
    name = "cuda_utils",
    hdrs = ["cuda_utils.h"],
    deps = [
        # "@local_cuda//:cuda_runtime",
        "@cuda//:cuda_runtime",
    ],
)

common_utils_cc_test(
    name = "cuda_utils_test",
    deps = [":cuda_utils"],
)

common_utils_cc_library(
    name = "eigen_pack_utils",
    hdrs = ["eigen_pack_utils.h"],
    deps = [
        ":essential",
    ],
)

common_utils_cc_test(
    name = "eigen_pack_utils_test",
    deps = [
        ":eigen_pack_utils",
        "//utils/test_utils:eigen_matrix_compare",
    ],
)

common_utils_cc_library(
    name = "hash",
    hdrs = ["hash.h"],
    deps = [
        ":essential",
    ],
)

common_utils_cc_test(
    name = "hash_test",
    deps = [
        ":hash",
    ],
)

common_utils_cc_library(
    name = "identifier",
    srcs = ["identifier.cc"],
    hdrs = [
        "identifier.h",
    ],
    deps = [
        ":essential",
        ":hash",
    ],
)

common_utils_cc_test(
    name = "identifier_test",
    deps = [
        ":identifier",
        ":sorted_pair",
        "//utils/test_utils:expect_no_throw",
        "//utils/test_utils:expect_throws_message",
    ],
)

common_utils_cc_library(
    name = "is_less_than_comparable",
    hdrs = [
        "is_less_than_comparable.h",
    ],
    deps = [
        ":unused",
    ],
)

common_utils_cc_test(
    name = "is_less_than_comparable_test",
    deps = [
        ":is_less_than_comparable",
    ],
)

common_utils_cc_library(
    name = "sorted_pair",
    srcs = [
        "sorted_pair.cc",
    ],
    hdrs = [
        "sorted_pair.h",
    ],
    deps = [
        ":hash",
        ":is_less_than_comparable",
    ],
)

common_utils_cc_test(
    name = "sorted_pair_test",
    deps = [
        ":sorted_pair",
    ],
)

common_utils_cc_test(
    name = "essential_test",
    srcs = [
        "test/common_utils_assert_test.cc",
        "test/common_utils_copyable_test.cc",
        "test/common_utils_throw_test.cc",
        "test/eigen_types_test.cc",
        "test/never_destroyed_test.cc",
        # "test/scalar_types_test.cc", TODO(Alexandre.Amice make this test)
    ],
    deps = [
        ":essential",
        ":unused",
        "//utils/test_utils:expect_no_throw",
        "//utils/test_utils:is_dynamic_castable",
    ],
)

# Messily test sdplog integration. We don't use Drake's fancy configurable HAVE_SPDLOG macro, so most of these tests do not get run. I leave them in here in case we want to make spdlog configurable later.
# This version of text_logging_test is compiled with HAVE_SPDLOG enabled,
common_utils_cc_test(
    name = "text_logging_test",
    defines = [
        "TEXT_LOGGING_TEST_SPDLOG=1",
    ],
    # use_default_main = False,
    deps = [
        ":essential",
    ],
)

common_utils_cc_library(
    name = "parallelism",
    srcs = ["parallelism.cc"],
    hdrs = ["parallelism.h"],
    deps = [
        ":essential",
    ],
)

common_utils_cc_test(
    name = "parallelism_test",
    num_threads = 2,
    deps = [
        ":parallelism",
    ],
)

# # Likewise (to the above test) for the ostream variation.
# common_utils_cc_test(
#     name = "text_logging_ostream_test",
#     defines = [
#         "TEXT_LOGGING_TEST_SPDLOG=1",
#     ],
#     # use_default_main = False,
#     deps = [
#         ":essential",
#     ],
# )

# # This version of text_logging_test re-compiles all source files without
# # defining HAVE_SPDLOG, to ensure that the no-op stubs behave as desired.
# common_utils_cc_test(
#     name = "text_logging_no_spdlog_test",
#     srcs = [
#         "common_utils_copyable.h",
#         "fmt.h",
#         "never_destroyed.h",
#         "test/text_logging_test.cc",
#         "text_logging.cc",
#         "text_logging.h",
#     ],
#     defines = [
#         "TEXT_LOGGING_TEST_SPDLOG=0",
#     ],
#     # use_default_main = False,
#     deps = [
#         "@fmt",
#     ],
# )

# # Likewise (to the above test) for the ostream variation.
# common_utils_cc_test(
#     name = "text_logging_ostream_no_spdlog_test",
#     srcs = [
#         "common_utils_copyable.h",
#         "fmt.h",
#         "fmt_ostream.h",
#         "never_destroyed.h",
#         "test/text_logging_ostream_test.cc",
#         "text_logging.cc",
#         "text_logging.h",
#     ],
#     defines = [
#         "TEXT_LOGGING_TEST_SPDLOG=0",
#     ],
#     # use_default_main = False,
#     deps = [
#         "@fmt",
#     ],
# )

add_lint_tests()
